<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Menu extends \AppBundle\Entity\Menu implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'titre', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'prix', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'photo', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'categorie', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'plats', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'caddies');
        }

        return array('__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'titre', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'prix', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'photo', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'categorie', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'plats', '' . "\0" . 'AppBundle\\Entity\\Menu' . "\0" . 'caddies');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Menu $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitre($titre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitre', array($titre));

        return parent::setTitre($titre);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitre()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitre', array());

        return parent::getTitre();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrix($prix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrix', array($prix));

        return parent::setPrix($prix);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrix', array());

        return parent::getPrix();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategorie(\AppBundle\Entity\Categorie $categorie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategorie', array($categorie));

        return parent::setCategorie($categorie);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategorie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategorie', array());

        return parent::getCategorie();
    }

    /**
     * {@inheritDoc}
     */
    public function addPlat(\AppBundle\Entity\Plat $plats)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPlat', array($plats));

        return parent::addPlat($plats);
    }

    /**
     * {@inheritDoc}
     */
    public function removePlat(\AppBundle\Entity\Plat $plats)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePlat', array($plats));

        return parent::removePlat($plats);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlats()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlats', array());

        return parent::getPlats();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', array($active));

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', array());

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setCaddie(\AppBundle\Entity\Caddie $caddie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCaddie', array($caddie));

        return parent::setCaddie($caddie);
    }

    /**
     * {@inheritDoc}
     */
    public function getCaddie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCaddie', array());

        return parent::getCaddie();
    }

    /**
     * {@inheritDoc}
     */
    public function addCaddy(\AppBundle\Entity\Caddie $caddies)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCaddy', array($caddies));

        return parent::addCaddy($caddies);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCaddy(\AppBundle\Entity\Caddie $caddies)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCaddy', array($caddies));

        return parent::removeCaddy($caddies);
    }

    /**
     * {@inheritDoc}
     */
    public function getCaddies()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCaddies', array());

        return parent::getCaddies();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhoto($photo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhoto', array($photo));

        return parent::setPhoto($photo);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhoto()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhoto', array());

        return parent::getPhoto();
    }

}
